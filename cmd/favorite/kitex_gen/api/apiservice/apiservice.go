// Code generated by Kitex v0.4.4. DO NOT EDIT.

package apiservice

import (
	api "DY_BAT/cmd/favorite/kitex_gen/api"
	"context"
	client "github.com/cloudwego/kitex/client"
	kitex "github.com/cloudwego/kitex/pkg/serviceinfo"
)

func serviceInfo() *kitex.ServiceInfo {
	return apiServiceServiceInfo
}

var apiServiceServiceInfo = NewServiceInfo()

func NewServiceInfo() *kitex.ServiceInfo {
	serviceName := "ApiService"
	handlerType := (*api.ApiService)(nil)
	methods := map[string]kitex.MethodInfo{
		"UserRegister":   kitex.NewMethodInfo(userRegisterHandler, newApiServiceUserRegisterArgs, newApiServiceUserRegisterResult, false),
		"UserLogin":      kitex.NewMethodInfo(userLoginHandler, newApiServiceUserLoginArgs, newApiServiceUserLoginResult, false),
		"UserInfo":       kitex.NewMethodInfo(userInfoHandler, newApiServiceUserInfoArgs, newApiServiceUserInfoResult, false),
		"FavoriteAction": kitex.NewMethodInfo(favoriteActionHandler, newApiServiceFavoriteActionArgs, newApiServiceFavoriteActionResult, false),
		"FavoriteList":   kitex.NewMethodInfo(favoriteListHandler, newApiServiceFavoriteListArgs, newApiServiceFavoriteListResult, false),
	}
	extra := map[string]interface{}{
		"PackageName": "api",
	}
	svcInfo := &kitex.ServiceInfo{
		ServiceName:     serviceName,
		HandlerType:     handlerType,
		Methods:         methods,
		PayloadCodec:    kitex.Thrift,
		KiteXGenVersion: "v0.4.4",
		Extra:           extra,
	}
	return svcInfo
}

func userRegisterHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*api.ApiServiceUserRegisterArgs)
	realResult := result.(*api.ApiServiceUserRegisterResult)
	success, err := handler.(api.ApiService).UserRegister(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newApiServiceUserRegisterArgs() interface{} {
	return api.NewApiServiceUserRegisterArgs()
}

func newApiServiceUserRegisterResult() interface{} {
	return api.NewApiServiceUserRegisterResult()
}

func userLoginHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*api.ApiServiceUserLoginArgs)
	realResult := result.(*api.ApiServiceUserLoginResult)
	success, err := handler.(api.ApiService).UserLogin(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newApiServiceUserLoginArgs() interface{} {
	return api.NewApiServiceUserLoginArgs()
}

func newApiServiceUserLoginResult() interface{} {
	return api.NewApiServiceUserLoginResult()
}

func userInfoHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*api.ApiServiceUserInfoArgs)
	realResult := result.(*api.ApiServiceUserInfoResult)
	success, err := handler.(api.ApiService).UserInfo(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newApiServiceUserInfoArgs() interface{} {
	return api.NewApiServiceUserInfoArgs()
}

func newApiServiceUserInfoResult() interface{} {
	return api.NewApiServiceUserInfoResult()
}

func favoriteActionHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*api.ApiServiceFavoriteActionArgs)
	realResult := result.(*api.ApiServiceFavoriteActionResult)
	success, err := handler.(api.ApiService).FavoriteAction(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newApiServiceFavoriteActionArgs() interface{} {
	return api.NewApiServiceFavoriteActionArgs()
}

func newApiServiceFavoriteActionResult() interface{} {
	return api.NewApiServiceFavoriteActionResult()
}

func favoriteListHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*api.ApiServiceFavoriteListArgs)
	realResult := result.(*api.ApiServiceFavoriteListResult)
	success, err := handler.(api.ApiService).FavoriteList(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newApiServiceFavoriteListArgs() interface{} {
	return api.NewApiServiceFavoriteListArgs()
}

func newApiServiceFavoriteListResult() interface{} {
	return api.NewApiServiceFavoriteListResult()
}

type kClient struct {
	c client.Client
}

func newServiceClient(c client.Client) *kClient {
	return &kClient{
		c: c,
	}
}

func (p *kClient) UserRegister(ctx context.Context, req *api.DouyinUserRegisterRequest) (r *api.DouyinUserRegisterResponse, err error) {
	var _args api.ApiServiceUserRegisterArgs
	_args.Req = req
	var _result api.ApiServiceUserRegisterResult
	if err = p.c.Call(ctx, "UserRegister", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) UserLogin(ctx context.Context, req *api.DouyinUserLoginRequest) (r *api.DouyinUserLoginResponse, err error) {
	var _args api.ApiServiceUserLoginArgs
	_args.Req = req
	var _result api.ApiServiceUserLoginResult
	if err = p.c.Call(ctx, "UserLogin", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) UserInfo(ctx context.Context, req *api.Douyin_User_Request) (r *api.DouyinUserResponse, err error) {
	var _args api.ApiServiceUserInfoArgs
	_args.Req = req
	var _result api.ApiServiceUserInfoResult
	if err = p.c.Call(ctx, "UserInfo", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) FavoriteAction(ctx context.Context, req *api.DouyinFavoriteActionRequest) (r *api.DouyinFavoriteActionResponse, err error) {
	var _args api.ApiServiceFavoriteActionArgs
	_args.Req = req
	var _result api.ApiServiceFavoriteActionResult
	if err = p.c.Call(ctx, "FavoriteAction", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) FavoriteList(ctx context.Context, req *api.DouyinFavoriteListRequest) (r *api.DouyinFavoriteListResponse, err error) {
	var _args api.ApiServiceFavoriteListArgs
	_args.Req = req
	var _result api.ApiServiceFavoriteListResult
	if err = p.c.Call(ctx, "FavoriteList", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}
