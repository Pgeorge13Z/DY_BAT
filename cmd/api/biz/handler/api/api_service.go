// Code generated by hertz generator.

package api

import (
	"DY_BAT/cmd/api/biz/rpc"
	"DY_BAT/cmd/publish/kitex_gen/publish"
	"DY_BAT/cmd/user/kitex_gen/user"
	"bytes"
	"context"
	"fmt"
	"io"

	api "DY_BAT/cmd/api/biz/model/api"
	"github.com/cloudwego/hertz/pkg/app"
	"github.com/cloudwego/hertz/pkg/protocol/consts"
)

var msg string

// UserRegister .
// @router /douyin/user/register/ [POST]
func UserRegister(ctx context.Context, c *app.RequestContext) {
	var err error
	var req api.DouyinUserRegisterRequest
	err = c.BindAndValidate(&req)
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}

	resp := &api.DouyinUserRegisterResponse{StatusMsg: &msg}
	//username := c.Query("username")
	username := req.Username
	//password := c.Query("password")
	password := req.Password
	//
	userResp, _ := rpc.RegisterUser(ctx, &user.DouyinUserRegisterRequest{
		Username: username,
		Password: password,
	})
	resp.StatusMsg = userResp.StatusMsg
	resp.StatusCode = userResp.StatusCode
	resp.Token = userResp.Token
	resp.UserID = userResp.UserId
	////
	c.JSON(consts.StatusOK, resp)
}

// UserLogin .
// @router /douyin/user/login/ [POST]
func UserLogin(ctx context.Context, c *app.RequestContext) {
	var err error
	var req api.DouyinUserLoginRequest
	err = c.BindAndValidate(&req)
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}

	resp := &api.DouyinUserLoginResponse{StatusMsg: &msg}
	username := c.Query("username")
	password := c.Query("password")
	userResp, _ := rpc.LoginUser(ctx, &user.DouyinUserLoginRequest{
		Username: username,
		Password: password,
	})
	resp.StatusMsg = userResp.StatusMsg
	resp.StatusCode = userResp.StatusCode
	resp.Token = userResp.Token
	resp.UserID = userResp.UserId
	c.JSON(consts.StatusOK, resp)
}

// UserInfo .
// @router /douyin/user/ [GET]
func UserInfo(ctx context.Context, c *app.RequestContext) {
	var err error
	var req api.DouyinUserRequest
	err = c.BindAndValidate(&req)
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}

	//resp := new(api.DouyinUserResponse)
	resp := &api.DouyinUserResponse{StatusMsg: &msg, User: api.NewUser()}
	//Userid := c.Query("user_id")
	Userid := req.GetUserID()
	UserToken := req.GetToken()
	userResp, err := rpc.GetUserInfo(ctx, &user.DouyinUserRequest{UserId: Userid, Token: UserToken})
	resp.StatusMsg = userResp.StatusMsg
	resp.StatusCode = userResp.StatusCode
	resp.User.Name = userResp.User.Name
	resp.User.ID = userResp.User.Id
	resp.User.FollowerCount = userResp.User.FollowerCount
	resp.User.FollowCount = userResp.User.FollowCount
	resp.User.IsFollow = userResp.User.IsFollow
	resp.User.Avatar = userResp.User.Avatar
	resp.User.BackgroundImage = userResp.User.BackgroundImage
	resp.User.Signature = userResp.User.Signature
	resp.User.TotaolFavorited = userResp.User.TotaolFavorited
	resp.User.WorkCount = userResp.User.WorkCount
	resp.User.FavoriteCount = userResp.User.FavoriteCount

	c.JSON(consts.StatusOK, resp)

	//type UserInfoResponse struct {
	//	StatusCode int32       `json:"status_code"`
	//	StatusMsg  *string      `json:"status_msg"`
	//	User       interface{} `json:"user"`
	//}
	//
	//c.JSON(consts.StatusOK,UserInfoResponse{
	//	StatusMsg: userResp.StatusMsg,
	//	StatusCode: userResp.StatusCode,
	//	User: userResp.User,

	//})
}

// PublishAction .
// @router /douyin/publish/action/ [POST]
func PublishAction(ctx context.Context, c *app.RequestContext) {
	//var err error
	//var req api.DouyinPublishActionRequest
	//err = c.BindAndValidate(&req)
	//if err != nil {
	//	fmt.Println("======")
	//	c.String(consts.StatusBadRequest, err.Error())
	//	return
	//}

	token := c.FormValue("token")
	title := c.FormValue("title")

	//resp := new(api.DouyinPublishActionResponse)
	resp := &api.DouyinPublishActionResponse{StatusMsg: &msg}

	//将file类型的文件解析为[]byte

	data, _ := c.FormFile("data")
	file, _ := data.Open()
	defer file.Close()

	buf := bytes.NewBuffer(nil)

	if _, err := io.Copy(buf, file); err != nil {
		fmt.Println("io copy fail", err)
		c.String(consts.StatusBadRequest, err.Error())
		return
	}

	Video := buf.Bytes()

	PublishRsp, _ := rpc.PublishAction(ctx, &publish.DouyinPublishActionRequest{
		Title: string(title),
		Token: string(token),
		Data:  Video,
	})

	resp.StatusMsg = PublishRsp.StatusMsg
	resp.StatusCode = PublishRsp.StatusCode

	c.JSON(consts.StatusOK, resp)
}

// PublishList .
// @router /douyin/publish/list/ [GET]
func PublishList(ctx context.Context, c *app.RequestContext) {
	var err error
	var req api.DouyinPublishListRequest
	err = c.BindAndValidate(&req)
	if err != nil {

		c.String(consts.StatusBadRequest, err.Error())
		return
	}

	//resp := new(api.DouyinPublishListResponse)

	//resp := &api.DouyinPublishListResponse{StatusMsg: &msg, VideoList: make([]*api.Video, 0)}

	userid := req.GetUserID()
	token := req.GetToken()

	PublishListRsp, _ := rpc.PublishList(ctx, &publish.DouyinPublishListRequest{UserId: userid, Token: token})

	type PublishListResponse struct {
		VideoList  interface{} `json:"video_list"`
		StatusCode int32       ` json:"status_code" `
		StatusMsg  string      ` json:"status_msg" `
	}

	type VideoResponse struct {
		Id            int64       `json:"id" `
		Author        interface{} `json:"author"`
		PlayUrl       string      ` json:"play_url" `
		CoverUrl      string      `json:"cover_url"`
		FavoriteCount int64       `json:"favorite_count"`
		CommentCount  int64       `json:"comment_count"`
		IsFavorite    bool        `json:"is_favorite"`
		Title         string      `json:"title"`
	}

	VideoRes := make([]*VideoResponse, 0)

	VideoList := PublishListRsp.VideoList

	for _, video := range VideoList {
		userResp, _ := rpc.GetUserInfo(ctx, &user.DouyinUserRequest{UserId: userid, Token: token})

		VideoResItem := &VideoResponse{
			Id:            video.Id,
			Author:        userResp.User,
			PlayUrl:       video.PlayUrl,
			CoverUrl:      video.CoverUrl,
			FavoriteCount: video.FavoriteCount,
			CommentCount:  video.CommentCount,
			IsFavorite:    video.IsFavorite,
			Title:         video.Title,
		}
		VideoRes = append(VideoRes, VideoResItem)
	}

	c.JSON(consts.StatusOK, PublishListResponse{
		StatusCode: PublishListRsp.StatusCode,
		StatusMsg:  *PublishListRsp.StatusMsg,
		VideoList:  VideoRes,
	})
}
