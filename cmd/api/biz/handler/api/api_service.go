// Code generated by hertz generator.

package api

import (
	api "DY_BAT/cmd/api/biz/model/api"
	"DY_BAT/cmd/api/biz/rpc"
	"DY_BAT/cmd/favorite/kitex_gen/favorite"
	"DY_BAT/cmd/user/kitex_gen/user"
	"context"
	"fmt"
	"github.com/cloudwego/hertz/pkg/app"
	"github.com/cloudwego/hertz/pkg/protocol/consts"
	"strconv"
)

var msg string

// UserRegister .
// @router /douyin/user/register/ [POST]
func UserRegister(ctx context.Context, c *app.RequestContext) {
	var err error
	var req api.DouyinUserRegisterRequest
	err = c.BindAndValidate(&req)
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}

	resp := &api.DouyinUserRegisterResponse{StatusMsg: &msg}
	//username := c.Query("username")
	username := req.Username
	//password := c.Query("password")
	password := req.Password
	//
	userResp, _ := rpc.RegisterUser(ctx, &user.DouyinUserRegisterRequest{
		Username: username,
		Password: password,
	})
	resp.StatusMsg = userResp.StatusMsg
	resp.StatusCode = userResp.StatusCode
	resp.Token = userResp.Token
	resp.UserID = userResp.UserId
	////
	c.JSON(consts.StatusOK, resp)
}

// UserLogin .
// @router /douyin/user/login/ [POST]
func UserLogin(ctx context.Context, c *app.RequestContext) {
	var err error
	var req api.DouyinUserLoginRequest
	err = c.BindAndValidate(&req)
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}

	resp := &api.DouyinUserLoginResponse{StatusMsg: &msg}
	username := c.Query("username")
	password := c.Query("password")
	userResp, _ := rpc.LoginUser(ctx, &user.DouyinUserLoginRequest{
		Username: username,
		Password: password,
	})
	resp.StatusMsg = userResp.StatusMsg
	resp.StatusCode = userResp.StatusCode
	resp.Token = userResp.Token
	resp.UserID = userResp.UserId
	c.JSON(consts.StatusOK, resp)
}

// UserInfo .
// @router /douyin/user/ [GET]
func UserInfo(ctx context.Context, c *app.RequestContext) {
	var err error
	var req api.DouyinUserRequest
	err = c.BindAndValidate(&req)
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}

	//resp := new(api.DouyinUserResponse)
	resp := &api.DouyinUserResponse{StatusMsg: &msg, User: api.NewUser()}
	//Userid := c.Query("user_id")
	Userid := req.GetUserID()
	UserToken := req.GetToken()
	userResp, err := rpc.GetUserInfo(ctx, &user.DouyinUserRequest{UserId: Userid, Token: UserToken})
	resp.StatusMsg = userResp.StatusMsg
	resp.StatusCode = userResp.StatusCode
	resp.User.Name = userResp.User.Name
	resp.User.ID = userResp.User.Id
	resp.User.FollowerCount = userResp.User.FollowerCount
	resp.User.FollowCount = userResp.User.FollowCount
	resp.User.IsFollow = userResp.User.IsFollow
	fmt.Println(resp.User.IsFollow)
	resp.User.Avatar = userResp.User.Avatar
	fmt.Println(resp.User.Avatar)
	resp.User.BackgroundImage = userResp.User.BackgroundImage
	resp.User.Signature = userResp.User.Signature
	resp.User.TotaolFavorited = userResp.User.TotaolFavorited
	resp.User.WorkCount = userResp.User.WorkCount
	resp.User.FavoriteCount = userResp.User.FavoriteCount
	fmt.Printf("%#v", resp)

	c.JSON(consts.StatusOK, resp)
}

// FavoriteAction .
// @router /douyin/favorite/action [POST]
func FavoriteAction(ctx context.Context, c *app.RequestContext) {
	var err error
	var req api.DouyinFavoriteActionRequest
	err = c.BindAndValidate(&req)
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}

	//resp := new(api.DouyinFavoriteActionResponse)
	resp := &api.DouyinFavoriteActionResponse{StatusMsg: &msg}
	token := c.Query("token")
	video_id := c.Query("video_id")
	action_type := c.Query("action_type")
	vid, _ := strconv.ParseInt(video_id, 10, 64)
	aty, _ := strconv.ParseInt(action_type, 10, 32)

	favoriteResp, _ := rpc.ActionFavorite(ctx, &favorite.DouyinFavoriteActionRequest{
		Token:      token,
		VideoId:    vid,
		ActionType: int32(aty),
	})
	resp.StatusMsg = favoriteResp.StatusMsg
	resp.StatusCode = favoriteResp.StatusCode

	c.JSON(consts.StatusOK, resp)
}

// FavoriteList .
// @router /douyin/favorite/list [GET]
func FavoriteList(ctx context.Context, c *app.RequestContext) {
	var err error
	var req api.DouyinFavoriteListRequest
	err = c.BindAndValidate(&req)
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}

	//resp := new(api.DouyinFavoriteListResponse)
	Userid := req.GetUserID()
	token := req.GetToken()
	favoriteResp, err := rpc.ListFavorite(ctx, &favorite.DouyinFavoriteListRequest{UserId: Userid, Token: token})
	size := len(favoriteResp.VideoList)
	video := make([]*api.Video, size)

	for i := 0; i < size; i++ {
		video[i] = new(api.Video)
		video[i].ID = favoriteResp.VideoList[i].Id
		video[i].IsFavorite = favoriteResp.VideoList[i].IsFavorite
		video[i].FavoriteCount = favoriteResp.VideoList[i].FavoriteCount
		video[i].CoverURL = favoriteResp.VideoList[i].CoverUrl
		video[i].Title = favoriteResp.VideoList[i].Title
		video[i].PlayURL = favoriteResp.VideoList[i].PlayUrl
		video[i].CommentCount = favoriteResp.VideoList[i].CommentCount

		video[i].Author = new(api.User)
		video[i].Author.ID = favoriteResp.VideoList[i].Id
		video[i].Author.Avatar = favoriteResp.VideoList[i].Author.Avatar
		video[i].Author.FavoriteCount = favoriteResp.VideoList[i].Author.FavoriteCount
		video[i].Author.WorkCount = favoriteResp.VideoList[i].Author.WorkCount
		video[i].Author.Signature = favoriteResp.VideoList[i].Author.Signature
		video[i].Author.BackgroundImage = favoriteResp.VideoList[i].Author.BackgroundImage
		video[i].Author.IsFollow = favoriteResp.VideoList[i].Author.IsFollow
		video[i].Author.FollowerCount = favoriteResp.VideoList[i].Author.FollowerCount
		video[i].Author.FollowCount = favoriteResp.VideoList[i].Author.FollowCount
		video[i].Author.Name = favoriteResp.VideoList[i].Author.Name
		video[i].Author.TotaolFavorited = favoriteResp.VideoList[i].Author.TotaolFavorited
	}
	resp := &api.DouyinFavoriteListResponse{StatusMsg: msg, VideoList: video}
	resp.StatusCode = favoriteResp.StatusCode
	resp.StatusMsg = favoriteResp.StatusMsg
	fmt.Printf("%#v", resp)

	c.JSON(consts.StatusOK, resp)
}
