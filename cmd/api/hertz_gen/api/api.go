// Code generated by thriftgo (0.2.7). DO NOT EDIT.

package api

import (
	"fmt"
)

type User struct {
	ID            int64  `thrift:"id,1,required" form:"id,required" json:"id,required" query:"id,required"`
	Name          string `thrift:"name,2,required" form:"name,required" json:"name,required" query:"name,required"`
	FollowCount   *int64 `thrift:"follow_count,3,optional" form:"follow_count" json:"follow_count,omitempty" query:"follow_count"`
	FollowerCount *int64 `thrift:"follower_count,4,optional" form:"follower_count" json:"follower_count,omitempty" query:"follower_count"`
	IsFollow      bool   `thrift:"is_follow,5,required" form:"is_follow,required" json:"is_follow,required" query:"is_follow,required"`
}

func NewUser() *User {
	return &User{}
}

func (p *User) GetID() (v int64) {
	return p.ID
}

func (p *User) GetName() (v string) {
	return p.Name
}

var User_FollowCount_DEFAULT int64

func (p *User) GetFollowCount() (v int64) {
	if !p.IsSetFollowCount() {
		return User_FollowCount_DEFAULT
	}
	return *p.FollowCount
}

var User_FollowerCount_DEFAULT int64

func (p *User) GetFollowerCount() (v int64) {
	if !p.IsSetFollowerCount() {
		return User_FollowerCount_DEFAULT
	}
	return *p.FollowerCount
}

func (p *User) GetIsFollow() (v bool) {
	return p.IsFollow
}

func (p *User) IsSetFollowCount() bool {
	return p.FollowCount != nil
}

func (p *User) IsSetFollowerCount() bool {
	return p.FollowerCount != nil
}

func (p *User) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("User(%+v)", *p)
}

// 基础返回信息 包括状态码和状态描述
type BaseResp struct {
	StatusCode int32   `thrift:"status_code,1,required" form:"status_code,required" json:"status_code,required" query:"status_code,required"`
	StatsuMsg  *string `thrift:"statsu_msg,2,optional" form:"statsu_msg" json:"statsu_msg,omitempty" query:"statsu_msg"`
}

func NewBaseResp() *BaseResp {
	return &BaseResp{}
}

func (p *BaseResp) GetStatusCode() (v int32) {
	return p.StatusCode
}

var BaseResp_StatsuMsg_DEFAULT string

func (p *BaseResp) GetStatsuMsg() (v string) {
	if !p.IsSetStatsuMsg() {
		return BaseResp_StatsuMsg_DEFAULT
	}
	return *p.StatsuMsg
}

func (p *BaseResp) IsSetStatsuMsg() bool {
	return p.StatsuMsg != nil
}

func (p *BaseResp) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("BaseResp(%+v)", *p)
}

// 用户注册接口
type DouyinUserRegisterRequest struct {
	Username string `thrift:"username,1,required" json:"username,required" query:"username,required" vd:"len($) < 32"`
	Password string `thrift:"password,2,required" json:"password,required" query:"password,required" vd:"len($) < 32"`
}

func NewDouyinUserRegisterRequest() *DouyinUserRegisterRequest {
	return &DouyinUserRegisterRequest{}
}

func (p *DouyinUserRegisterRequest) GetUsername() (v string) {
	return p.Username
}

func (p *DouyinUserRegisterRequest) GetPassword() (v string) {
	return p.Password
}

func (p *DouyinUserRegisterRequest) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("DouyinUserRegisterRequest(%+v)", *p)
}

type DouyinUserRegisterResponse struct {
	UserID   int64     `thrift:"user_id,1,required" form:"user_id,required" json:"user_id,required" query:"user_id,required"`
	Token    string    `thrift:"token,2,required" form:"token,required" json:"token,required" query:"token,required"`
	BaseResp *BaseResp `thrift:"base_resp,3,required" form:"base_resp,required" json:"base_resp,required" query:"base_resp,required"`
}

func NewDouyinUserRegisterResponse() *DouyinUserRegisterResponse {
	return &DouyinUserRegisterResponse{}
}

func (p *DouyinUserRegisterResponse) GetUserID() (v int64) {
	return p.UserID
}

func (p *DouyinUserRegisterResponse) GetToken() (v string) {
	return p.Token
}

var DouyinUserRegisterResponse_BaseResp_DEFAULT *BaseResp

func (p *DouyinUserRegisterResponse) GetBaseResp() (v *BaseResp) {
	if !p.IsSetBaseResp() {
		return DouyinUserRegisterResponse_BaseResp_DEFAULT
	}
	return p.BaseResp
}

func (p *DouyinUserRegisterResponse) IsSetBaseResp() bool {
	return p.BaseResp != nil
}

func (p *DouyinUserRegisterResponse) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("DouyinUserRegisterResponse(%+v)", *p)
}

// 用户登陆接口
type DouyinUserLoginRequest struct {
	Username string `thrift:"username,1,required" json:"username,required" query:"username,required" vd:"len($) < 32"`
	Password string `thrift:"password,2,required" json:"password,required" query:"username,required" vd:"len($) < 32"`
}

func NewDouyinUserLoginRequest() *DouyinUserLoginRequest {
	return &DouyinUserLoginRequest{}
}

func (p *DouyinUserLoginRequest) GetUsername() (v string) {
	return p.Username
}

func (p *DouyinUserLoginRequest) GetPassword() (v string) {
	return p.Password
}

func (p *DouyinUserLoginRequest) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("DouyinUserLoginRequest(%+v)", *p)
}

type DouyinUserLoginResponse struct {
	UserID   int64     `thrift:"user_id,1,required" form:"user_id,required" json:"user_id,required" query:"user_id,required"`
	Token    string    `thrift:"token,2,required" form:"token,required" json:"token,required" query:"token,required"`
	BaseResp *BaseResp `thrift:"base_resp,3,required" form:"base_resp,required" json:"base_resp,required" query:"base_resp,required"`
}

func NewDouyinUserLoginResponse() *DouyinUserLoginResponse {
	return &DouyinUserLoginResponse{}
}

func (p *DouyinUserLoginResponse) GetUserID() (v int64) {
	return p.UserID
}

func (p *DouyinUserLoginResponse) GetToken() (v string) {
	return p.Token
}

var DouyinUserLoginResponse_BaseResp_DEFAULT *BaseResp

func (p *DouyinUserLoginResponse) GetBaseResp() (v *BaseResp) {
	if !p.IsSetBaseResp() {
		return DouyinUserLoginResponse_BaseResp_DEFAULT
	}
	return p.BaseResp
}

func (p *DouyinUserLoginResponse) IsSetBaseResp() bool {
	return p.BaseResp != nil
}

func (p *DouyinUserLoginResponse) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("DouyinUserLoginResponse(%+v)", *p)
}

// 用户信息
type DouyinUserRequest struct {
	UserID int64  `thrift:"user_id,1,required" json:"user_id,required" query:"user_id,required"`
	Token  string `thrift:"token,2,required" json:"token,required" query:"token,required"`
}

func NewDouyinUserRequest() *DouyinUserRequest {
	return &DouyinUserRequest{}
}

func (p *DouyinUserRequest) GetUserID() (v int64) {
	return p.UserID
}

func (p *DouyinUserRequest) GetToken() (v string) {
	return p.Token
}

func (p *DouyinUserRequest) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("DouyinUserRequest(%+v)", *p)
}

type DouyinUserResponse struct {
	User     *User     `thrift:"user,1,required" form:"user,required" json:"user,required" query:"user,required"`
	BaseResp *BaseResp `thrift:"base_resp,2,required" form:"base_resp,required" json:"base_resp,required" query:"base_resp,required"`
}

func NewDouyinUserResponse() *DouyinUserResponse {
	return &DouyinUserResponse{}
}

var DouyinUserResponse_User_DEFAULT *User

func (p *DouyinUserResponse) GetUser() (v *User) {
	if !p.IsSetUser() {
		return DouyinUserResponse_User_DEFAULT
	}
	return p.User
}

var DouyinUserResponse_BaseResp_DEFAULT *BaseResp

func (p *DouyinUserResponse) GetBaseResp() (v *BaseResp) {
	if !p.IsSetBaseResp() {
		return DouyinUserResponse_BaseResp_DEFAULT
	}
	return p.BaseResp
}

func (p *DouyinUserResponse) IsSetUser() bool {
	return p.User != nil
}

func (p *DouyinUserResponse) IsSetBaseResp() bool {
	return p.BaseResp != nil
}

func (p *DouyinUserResponse) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("DouyinUserResponse(%+v)", *p)
}
