// Code generated by hertz generator.

package follow

import (
	follow "DY_BAT/biz/model/follow"
	"context"

	rpcFollow "DY_BAT/cmd/follow/kitex_gen/follow"
	"DY_BAT/cmd/follow/kitex_gen/follow/followservice"

	"github.com/cloudwego/hertz/pkg/app"
	"github.com/cloudwego/hertz/pkg/protocol/consts"
	"github.com/cloudwego/kitex/client"
)

// FollowAction .
// @router action [POST]
func FollowAction(ctx context.Context, c *app.RequestContext) {
	var err error
	var req follow.DouyinFollowActionRequest
	//参数绑定
	err = c.BindAndValidate(&req)
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}

	//开启一个rpc client
	client, err := followservice.NewClient("followservice", client.WithHostPorts("127.0.0.1:8888"))
	if err != nil {
		panic(err)
	}

	//将req参数值付给RPC中的req
	reqRpc := &rpcFollow.DouyinFollowActionRequest{
		Token:      req.Token,
		ToUserId:   req.ToUserID,
		ActionType: req.ActionType,
	}

	//通过创建的RPC client调用FollowAction函数，参数为RPC中的req
	respRpc, err := client.FollowAction(ctx, reqRpc)

	//接收RPC调用的返回值，return
	resp := new(follow.DouyinFollowActionResponse)
	if respRpc == nil {
		resp = &follow.DouyinFollowActionResponse{
			StatusCode: 1,
			StatusMsg:  "invalid token",
		}
		c.JSON(consts.StatusOK, resp)
		return
	}
	if err != nil {
		panic(err)
	}

	resp = &follow.DouyinFollowActionResponse{
		StatusCode: respRpc.StatusCode,
		StatusMsg:  respRpc.StatusMsg,
	}
	c.JSON(consts.StatusOK, resp)
}

// FollowList .
// @router list [GET]
func FollowList(ctx context.Context, c *app.RequestContext) {
	var err error
	var req follow.DouyinFollowListRequest
	err = c.BindAndValidate(&req)
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}

	//开启一个rpc client
	client, err := followservice.NewClient("followservice", client.WithHostPorts("127.0.0.1:8888"))
	if err != nil {
		panic(err)
	}

	//将req参数值付给RPC中的req
	reqRpc := &rpcFollow.DouyinFollowListRequest{
		UserId: req.UserID,
		Token:  req.Token,
	}

	//通过创建的RPC client调用FollowAction函数，参数为RPC中的req
	respRpc, err := client.FollowList(ctx, reqRpc)
	resp := new(follow.DouyinFollowListResponse)
	//如果respRpc为空，用户鉴权失败,返回
	if respRpc == nil {
		resp = &follow.DouyinFollowListResponse{
			StatusCode: 1,
			StatusMsg:  "invalid token",
			UserList:   nil,
		}
		c.JSON(consts.StatusOK, resp)
		return
	}
	if err != nil {
		panic(err)
	}

	//接收RPC调用的返回值respRpc
	size := len(resp.UserList)
	resp = &follow.DouyinFollowListResponse{
		StatusCode: respRpc.StatusCode,
		StatusMsg:  respRpc.StatusMsg,
		UserList:   make([]*follow.User, size),
	}
	// 给UserList赋值
	i := 0
	for ; i < size; i++ {
		resp.UserList[i] = &follow.User{
			ID:            respRpc.UserList[i].Id,
			Name:          respRpc.UserList[i].Name,
			FollowCount:   respRpc.UserList[i].FollowCount,
			FollowerCount: respRpc.UserList[i].FollowerCount,
			IsFollow:      respRpc.UserList[i].IsFollow,
		}
	}
	c.JSON(consts.StatusOK, resp)
}
